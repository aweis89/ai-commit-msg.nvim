*ai-commit-msg.nvim.txt*   For Neovim >= 0.8.0  Last change: 2025 September 03

==============================================================================
Table of Contents                       *ai-commit-msg.nvim-table-of-contents*

1. ai-commit-msg.nvim                  |ai-commit-msg.nvim-ai-commit-msg.nvim|
  - Features                  |ai-commit-msg.nvim-ai-commit-msg.nvim-features|
  - Installation          |ai-commit-msg.nvim-ai-commit-msg.nvim-installation|
  - Prerequisites        |ai-commit-msg.nvim-ai-commit-msg.nvim-prerequisites|
  - Configuration        |ai-commit-msg.nvim-ai-commit-msg.nvim-configuration|
  - Example Configurations|ai-commit-msg.nvim-ai-commit-msg.nvim-example-configurations|
  - Important: Custom Model Pricing|ai-commit-msg.nvim-ai-commit-msg.nvim-important:-custom-model-pricing|
  - Commands                  |ai-commit-msg.nvim-ai-commit-msg.nvim-commands|
  - How it works          |ai-commit-msg.nvim-ai-commit-msg.nvim-how-it-works|
  - Requirements          |ai-commit-msg.nvim-ai-commit-msg.nvim-requirements|
  - Tips                          |ai-commit-msg.nvim-ai-commit-msg.nvim-tips|
  - License                    |ai-commit-msg.nvim-ai-commit-msg.nvim-license|
2. Links                                            |ai-commit-msg.nvim-links|

==============================================================================
1. ai-commit-msg.nvim                  *ai-commit-msg.nvim-ai-commit-msg.nvim*


<https://github.com/Safouene1/support-palestine-banner/blob/master/Markdown-pages/Support.md>
<https://github.com/aweis89/ai-commit-msg.nvim/actions/workflows/test.yml>
<https://github.com/aweis89/ai-commit-msg.nvim/actions/workflows/lint-test.yml>

**AI-powered commit messages while you review your diff in your favorite
editor.**

A Neovim plugin that automatically generates commit messages using AI when you
run `git commit -v`, letting you review your changes while the AI crafts the
perfect commit message.




FEATURES                      *ai-commit-msg.nvim-ai-commit-msg.nvim-features*

- Automatically generates commit messages using Gemini, OpenAI, or Anthropic APIs
    when you run `git commit -v`
- Works from terminal or within Neovim (using vim-fugitive)
- Non-intrusive - if you start typing, AI suggestions are added as comments instead
- Uses `GEMINI_API_KEY`, `OPENAI_API_KEY`, or `ANTHROPIC_API_KEY` environment variables for authentication
- Configurable model, temperature, and max tokens
- Optional push prompt after successful commits
- Customizable keymaps for commit buffer
- Optional spinner and notifications during generation


INSTALLATION              *ai-commit-msg.nvim-ai-commit-msg.nvim-installation*


USING LAZY.NVIM ~

>lua
    {
      "aweis89/ai-commit-msg.nvim",
      ft = "gitcommit",
      config = true,
      opts = {
        -- your configuration options here
      },
    }
<


WITH VIM-FUGITIVE (RECOMMENDED) ~

>lua
    {
      "tpope/vim-fugitive",
      cmd = { "Git" },
      keys = {
        -- Opens commit in a new tab so quitting doesn't exit Neovim
        { "<leader>gc", "<cmd>tab Git commit -v<cr>", desc = "Git commit" },
      },
    },
    {
      "aweis89/ai-commit-msg.nvim",
      ft = "gitcommit",
      config = true,
      opts = {
        -- your configuration options here
      },
    }
<


USING PACKER.NVIM ~

>lua
    use {
      "aweis89/ai-commit-msg.nvim",
      config = function()
        require("ai_commit_msg").setup({
          -- your configuration
        })
      end
    }
<


PREREQUISITES            *ai-commit-msg.nvim-ai-commit-msg.nvim-prerequisites*

1. Set your AI provider’s API key as an environment variable:

**For Gemini (default, best value):**

>bash
    export GEMINI_API_KEY="your-api-key-here"
<

**For OpenAI:**

>bash
    export OPENAI_API_KEY="your-api-key-here"
<

**For Anthropic:**

>bash
    export ANTHROPIC_API_KEY="your-api-key-here"
<

1. Configure Neovim as your Git editor:

>bash
    git config --global core.editor nvim
<


CONFIGURATION            *ai-commit-msg.nvim-ai-commit-msg.nvim-configuration*

>lua
    require("ai_commit_msg").setup({
      -- Enable/disable the plugin
      enabled = true,
      
      -- AI provider to use ("gemini", "openai", or "anthropic")
      provider = "gemini",
      
      -- Whether to prompt for push after commit
      auto_push_prompt = true,
      
      -- Show spinner while generating
      spinner = true,
      
      -- Show notifications
      notifications = true,
      
      -- Number of surrounding lines to include in git diff (default: 10)
      context_lines = 10,
      
      -- Cost display format ("compact", "verbose", or false to disable)
      cost_display = "compact",
      
      -- Keymaps for commit buffer
      keymaps = {
        quit = "q",  -- Set to false to disable
      },
      
      -- Provider-specific configurations
      providers = {
        openai = {
          model = "gpt-5-nano",
          temperature = 0.3,
          max_tokens = nil,  -- Uses model default
          -- Used to display cost per commit in notifications (see screenshot above)
          reasoning_effort = "minimal",  -- Options: "minimal", "medium", "high" (only applies to reasoning models like gpt-5*)
          -- Per-model pricing. Add entries for any models you use.
          pricing = {
            ["gpt-5-nano"] = {
              input_per_million = 0.05,   -- Cost per million input tokens
              output_per_million = 0.40,  -- Cost per million output tokens
            },
          },
          system_prompt = nil, -- Override to customize commit message generation instructions
        },
        anthropic = {
          model = "claude-3-5-haiku-20241022",
          temperature = 0.3,
          max_tokens = 1000,  -- Required for Anthropic API
          pricing = {
            ["claude-3-5-haiku-20241022"] = {
              input_per_million = 0.80,   -- Cost per million input tokens
              output_per_million = 4.00,  -- Cost per million output tokens
            },
          },
          system_prompt = nil, -- Override to customize commit message generation instructions
        },
        gemini = {
          model = "gemini-2.5-flash-lite",
          temperature = 0.3,
          max_tokens = 1000,
          pricing = {
            ["gemini-2.5-flash-lite"] = {
              input_per_million = 0.10,   -- Cost per million input tokens
              output_per_million = 0.40,  -- Cost per million output tokens
            },
          },
        },
      },
    })
<


EXAMPLE CONFIGURATIONS*ai-commit-msg.nvim-ai-commit-msg.nvim-example-configurations*


SWITCH TO OPENAI ~

>lua
    require("ai_commit_msg").setup({
      provider = "openai",
    })
<


SWITCH TO ANTHROPIC CLAUDE ~

>lua
    require("ai_commit_msg").setup({
      provider = "anthropic",
    })
<


CUSTOMIZE GEMINI SETTINGS (DEFAULT) ~

>lua
    require("ai_commit_msg").setup({
      provider = "gemini",
      providers = {
        gemini = {
          model = "gemini-2.5-flash-lite",
          temperature = 0.5,
          -- Pricing is resolved by model. Add entries for any models you use.
          pricing = {
            ["gemini-2.5-flash-lite"] = {
              input_per_million = 0.10,
              output_per_million = 0.40,
            },
          },
        },
      },
    })
<


CUSTOM SYSTEM PROMPT FOR SPECIFIC COMMIT STYLE ~

>lua
    require("ai_commit_msg").setup({
      providers = {
        gemini = {
          system_prompt = [[Generate a commit message following Angular commit conventions.
    Include scope if applicable. Format: type(scope): description]], -- Override system prompt, diff is added as user message
        },
      },
    })
<


IMPORTANT: CUSTOM MODEL PRICING*ai-commit-msg.nvim-ai-commit-msg.nvim-important:-custom-model-pricing*

**When using different models, define pricing for each model you use.** If the
configured model has no pricing entry, cost will be omitted from the
notification.

Examples:

>lua
    require("ai_commit_msg").setup({
      providers = {
        gemini = {
          model = "gemini-2.5-flash",  -- Using different model
          pricing = {
            ["gemini-2.5-flash-lite"] = {
              input_per_million = 0.10,
              output_per_million = 0.40,
            },
            ["gemini-2.5-flash"] = {
              input_per_million = 0.30,
              output_per_million = 2.50,
            },
          },
        },
      },
    })
<


COMMANDS                      *ai-commit-msg.nvim-ai-commit-msg.nvim-commands*

- `:AiCommitMsg` - Manually generate a commit message (prints to messages)
- `:AiCommitMsgDisable` - Disable automatic commit message generation
- `:AiCommitMsgEnable` - Enable automatic commit message generation


HOW IT WORKS              *ai-commit-msg.nvim-ai-commit-msg.nvim-how-it-works*

The plugin works seamlessly whether you commit from the terminal or within
Neovim:


FROM TERMINAL ~

>bash
    git add .
    git commit -v  # Opens Neovim with diff visible, AI generates message while you review
<


FROM WITHIN NEOVIM (USING VIM-FUGITIVE) ~

>vim
    :Git add .
    :tab Git commit -v  " Opens in new tab, AI generates message while you review
    " or with the keymap: <leader>gc
<

1. When you run `git commit -v` (with Neovim as your Git editor), the plugin
automatically:

- Detects when Git opens the commit message buffer
- Runs `git diff --staged` to get your staged changes
- Sends the diff to your configured AI provider’s API with your configured prompt
- Inserts the generated message into the commit buffer
- The `-v` flag shows the diff below the message,
    allowing you to review changes during commit generation


2. If the buffer already has content (e.g., from a commit template), the
AI-generated message is added as comments below for reference.


3. After you save and close the commit buffer, the plugin:

- Checks if the commit was successful (not cancelled or empty)
- If successful and `auto_push_prompt` is enabled, prompts you to push the commit



**Note:** This requires Neovim to be your Git editor. Set it with:

>bash
    git config --global core.editor nvim
<


REQUIREMENTS              *ai-commit-msg.nvim-ai-commit-msg.nvim-requirements*

- Neovim >= 0.7.0
- AI provider API key:
    - Gemini: Set `GEMINI_API_KEY` environment variable (default, best value)
    - OpenAI: Set `OPENAI_API_KEY` environment variable
    - Anthropic: Set `ANTHROPIC_API_KEY` environment variable
- Git
- curl (for making API requests)


TIPS                              *ai-commit-msg.nvim-ai-commit-msg.nvim-tips*

- The plugin uses Gemini API, OpenAI Chat Completions API, and Anthropic Messages API directly
- Lower temperature values (0.1-0.3) produce more consistent commit messages
- Higher temperature values (0.5-0.8) produce more creative variations
- The default model `gemini-2.5-flash-lite` provides excellent results at a very low cost
- For OpenAI’s `gpt-5*`, the reasoning effort defaults to "minimal" when not specified
- Claude 3.5 Haiku is also a solid choice for commit message generation
- If you don’t specify `max_tokens`, the model will use its default limit
- For Anthropic models, `max_tokens` is required by the API
    (defaults to 1000 if not specified)


LICENSE                        *ai-commit-msg.nvim-ai-commit-msg.nvim-license*

MIT

==============================================================================
2. Links                                            *ai-commit-msg.nvim-links*

1. *StandWithPalestine*: https://raw.githubusercontent.com/Safouene1/support-palestine-banner/master/StandWithPalestine.svg
2. *test*: https://github.com/aweis89/ai-commit-msg.nvim/actions/workflows/test.yml/badge.svg?branch=main
3. *lint-test*: https://github.com/aweis89/ai-commit-msg.nvim/actions/workflows/lint-test.yml/badge.svg?branch=main

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
